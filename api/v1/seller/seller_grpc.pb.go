// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: v1/seller/seller.proto

package seller

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Seller_Self_FullMethodName = "/api.v1.auth.seller.Seller/Self"
)

// SellerClient is the client API for Seller service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SellerClient interface {
	Self(ctx context.Context, in *SelfRequest, opts ...grpc.CallOption) (*SelfReply, error)
}

type sellerClient struct {
	cc grpc.ClientConnInterface
}

func NewSellerClient(cc grpc.ClientConnInterface) SellerClient {
	return &sellerClient{cc}
}

func (c *sellerClient) Self(ctx context.Context, in *SelfRequest, opts ...grpc.CallOption) (*SelfReply, error) {
	out := new(SelfReply)
	err := c.cc.Invoke(ctx, Seller_Self_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SellerServer is the server API for Seller service.
// All implementations must embed UnimplementedSellerServer
// for forward compatibility
type SellerServer interface {
	Self(context.Context, *SelfRequest) (*SelfReply, error)
	mustEmbedUnimplementedSellerServer()
}

// UnimplementedSellerServer must be embedded to have forward compatible implementations.
type UnimplementedSellerServer struct {
}

func (UnimplementedSellerServer) Self(context.Context, *SelfRequest) (*SelfReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Self not implemented")
}
func (UnimplementedSellerServer) mustEmbedUnimplementedSellerServer() {}

// UnsafeSellerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SellerServer will
// result in compilation errors.
type UnsafeSellerServer interface {
	mustEmbedUnimplementedSellerServer()
}

func RegisterSellerServer(s grpc.ServiceRegistrar, srv SellerServer) {
	s.RegisterService(&Seller_ServiceDesc, srv)
}

func _Seller_Self_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerServer).Self(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Seller_Self_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerServer).Self(ctx, req.(*SelfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Seller_ServiceDesc is the grpc.ServiceDesc for Seller service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Seller_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.auth.seller.Seller",
	HandlerType: (*SellerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Self",
			Handler:    _Seller_Self_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/seller/seller.proto",
}
